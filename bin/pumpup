#!/usr/bin/env ruby

require 'rack'
require 'drb/drb'
require 'drb/timeridconv'
require 'action_dispatch'
require 'active_record'

# class Rack::BodyProxy
#   include DRb::DRbUndumped
# end
# 
# class ActionDispatch::BodyProxy
#   include DRb::DRbUndumped
# end
# 
# class ActiveRecord::ConnectionAdapters::ConnectionManagement::Proxy
#   include DRb::DRbUndumped
# end
# 
# class ActiveRecord::QueryCache::BodyProxy
#   include DRb::DRbUndumped
# end
# 
# class ActiveSupport::SafeBuffer
#   include DRb::DRbUndumped
# end

config = ARGV.first
config ||= '/Users/route/Projects/cybergifts/config.ru'
app = Rack::Builder.parse_file(config).first

class Wrapper
  include DRb::DRbUndumped

  def initialize(app)
    @app = app
  end

  def call(req)
    req['rack.input'] = StringIO.new unless req['rack.input']
    req['rack.errors'] = StringIO.new unless req['rack.errors']
    res = @app.call(req)
    res.last.close if res.last.respond_to? :close

    # res.last.each do |part|
    #   raise part.class.name
    # end

    res.extend(DRb::DRbUndumped)
    res
  end
end

DRb.install_id_conv(DRb::TimerIdConv.new)
DRb.start_service('druby://localhost:8787', Wrapper.new(app))
DRb.thread.join
