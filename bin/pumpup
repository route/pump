#!/usr/bin/env ruby

require 'rubygems'

require 'stringio'
require 'fileutils'
require 'socket'

require 'rack'
require 'rack/builder'

module Pump
  class Application
    IDLE = 1800 # 30 minutes for idle, otherwise process should be killed
    TICK = 30   # seconds for periodic selecting data on socket

    def initialize(app_path, socket_fileno, socket_path)
      @idle = 0
      @server = UNIXServer.for_fd(socket_fileno)
      at_exit { @server.close; FileUtils.rm(socket_path) }
      @app = Rack::Builder.parse_file(File.join(app_path, "config.ru")).first
      handle_requests
    end

    def handle_requests
      loop do
        unless IO.select([@server], nil, nil, TICK).nil?
          @idle = 0 # reset idle time

          socket = @server.accept
          debug "Incoming request"

          env = Marshal.load receive_data(socket)
          response = app_call(env)

          debug "Accepted answer from application"
          response = Marshal.dump(response)
          debug "Application response size: #{response.size}"
          sent = socket.send response, 0
          debug "Sent through socket: #{sent}"

          socket.close
        else
          @idle += TICK
          exit if @idle >= IDLE
        end
      end
    end

    def app_call(env)
      response_body = ""
      env.delete_if { |k, v| v.nil? }

      rack_input = StringIO.new(env["body"])
      rack_input.set_encoding(Encoding::BINARY) if rack_input.respond_to?(:set_encoding)

      env.update({
        "rack.version" => Rack::VERSION,
        "rack.input" => rack_input,
        "rack.errors" => $stderr,
        "rack.multithread" => true,
        "rack.multiprocess" => false,
        "rack.run_once" => false,
        "rack.url_scheme" => ["yes", "on", "1"].include?(ENV["HTTPS"]) ? "https" : "http"
      })

      status, headers, body = @app.call(env)

      body.each { |part| response_body << part }
      body.close  if body.respond_to? :close

      [status.to_i, headers.to_hash, response_body]
    end

    def receive_data(socket, buffer = "")
      while part = socket.recv(1024)
        buffer << part unless part.empty?
        break if IO.select([socket], nil, nil, 0).nil? || part.empty?
      end
      buffer
    end

    private

    def debug(message)
      STDERR.puts message
    end
  end
end

Pump::Application.new(ARGV[0], ARGV[1].to_i, ARGV[2])
